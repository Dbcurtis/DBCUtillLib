package net.dbcrd.DBCUtilLib;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Class that executes a native process
 * <p>
 * <p>
 */
@ClassPreamble(
        author = "Daniel B. Curtis",
        date = "OCT 2016 ",
        currentRevision = 1,
        lastModified = "9/25/2016",
        copyright = "(C) 2013-2016 by Daniel B. Curtis, all rights reserved",
        lastModifiedBy = "Daniel B. Curtis"
)
public class OSProcess
        implements Callable<ProcessBuilder> {

    /**
     *
     */
    private static final Logger THE_LOGGER = Logger.getLogger(OSProcess.class.getName());

    /**
     *
     */
    private List<String> args;

    /**
     *
     */
    private final List<String> errorList = new ArrayList<>(100);

    /**
     *
     */
    private final List<String> outputList = new ArrayList<>(100);

    /**
     *
     */
    private ProcessBuilder pb;

    /**
     *
     */
    private int returnedStatus;

    /**
     *
     */
    private int tosecs;

    /**
     *
     * @param args   a String[] which is totally ignored
     * @param tosecs
     */
    public OSProcess(final String[] args, int tosecs) {
        this(Arrays.asList(args), tosecs);
    }

    /**
     * TBD
     */
    public OSProcess() {
        this(Arrays.asList(""), 5);
    }

    /**
     *
     * @param args
     * @param tosecs
     */
    public OSProcess(List<String> args, int tosecs) {
        super();
        this.args = args;
        this.tosecs = tosecs;
        pb = new ProcessBuilder();
        returnedStatus = -100;
    }

    /**
     *
     * @return @throws IOException
     * @throws InterruptedException
     */
    @Override
    public ProcessBuilder call()
            throws IOException, InterruptedException {

        BufferedReader bris = null;
        BufferedReader breis = null;
        Process process = null;
//        errorList.clear();
//        outputList.clear();

        pb.command(args);

        returnedStatus = -100;

        try {

            // try {
            process = pb.start();
//            }catch (Throwable t){
//                int i=0;
//                i++;
//            }
            bris = new BufferedReader(new InputStreamReader(process.getInputStream()));
            breis = new BufferedReader(new InputStreamReader(process.getErrorStream()));

            Thread outReader = new Thread(new ReadBR(bris, outputList));
            Thread errorReader = new Thread(new ReadBR(breis, errorList));
            outReader.start();
            errorReader.start();

            process.waitFor(tosecs, TimeUnit.SECONDS);
            if (process.isAlive()) {
                process.destroyForcibly();
                outReader.interrupt();
                errorReader.interrupt();
            }

            outReader.join(10000);
            errorReader.join(10000);
            bris.close();
            breis.close();
            returnedStatus = process.exitValue();

        } finally {
            if (null != process) {
                if (process.isAlive()) {
                    process.destroyForcibly();
                }
            }
            if (bris != null) {
                bris.close();
            }
            if (breis != null) {
                breis.close();
            }
        }
        return pb;
    }

    /**
     *
     * @return
     */
    public List<String> command() {
        return pb.command();
    }

    /**
     *
     * @param cmd
     *
     */
    public void command(List<String> cmd) {
        args = cmd;

    }

    /**
     *
     * @return
     */
    public List<String> getErrorList() {
        return errorList;
    }

    /**
     *
     * @return
     */
    public List<String> getOutputList() {
        return outputList;
    }

    /**
     * TBD
     */
    public void clear(){
        errorList.clear();
        outputList.clear();
    }
    /**
     *
     * @return an int
     */
    public int getReturnStatus() {
        return returnedStatus;
    }

    /**
     * reads a stream generated by the system process
     */
    private static class ReadBR
            implements Runnable {

        /**
         *
         */
        final BufferedReader br;

        /**
         *
         */
        final List<String> datal;

        /**
         *
         * @param br
         * @param datal
         */
        ReadBR(BufferedReader br, List<String> datal) {
            this.br = br;
            this.datal = datal;

        }

        @Override
        public void run() {
            try {
                String line;
                while ((line = br.readLine()) != null) {
                    datal.add(line);
                }
            } catch (IOException ex) {
                THE_LOGGER.log(Level.SEVERE, null, ex);
            }

        }
    }
}
